{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","outerContainer","height","display","stageContainerAfterUpload","width","alignContent","alignItems","buttonContainerAfterUpload","position","bottom","justifyContent","buttonContainerBeforeUpload","singleButtonContainerBeforeUpload","singleButtonContainerAfterUpload","button","background","fontFamily","fontStyle","color","border","fontWeight","textTransform","cursor","borderRadius","padding","textAlign","alignSelf","buttonBeforeUpload","Lamp","lampHeight","lampWidth","backgroundImage","data","shapeProps","isSelected","onSelect","onChange","React","useState","lampUrl","setLampUrl","node","images","edges","length","forEach","product","altText","originalSrc","useImage","image","aspectRatio","window","innerHeight","innerWidth","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","Fragment","crossOrigin","fill","onTap","onClick","ref","draggable","onDragEnd","e","x","target","y","onTransformEnd","scaleX","scaleY","Math","max","boundBoxFunc","oldBox","newBox","PictureCollage","query","queryString","location","search","productId","URLSearchParams","get","btoa","gql","classes","useQuery","canvasStage","createRef","newImage","Image","setBackgroundImage","setImage","selected","setSelected","setInnerWidth","setInnerHeight","shape","setShape","currentOrientation","setCurrentOrientation","offset","setOffset","backgroundCanvasWidth","setBackgroundCanvasWidth","backgroundCanvasHeight","setBackgroundCanvasHeight","changeOrientation","matchMedia","matches","orientationInnerWidth","orientationInnerHeight","offsetX","offsetY","scaledImage","loadImage","maxWidth","maxHeight","downsamplingRatio","pixelRatio","devicePixelRatio","imageSmoothingEnabled","imageSmoothingQuality","canvas","parseInt","style","onorientationchange","this","setTimeout","backgroundImageUpload","className","stageContainerBeforeUpload","visible","htmlFor","id","visibility","type","accept","file","files","img","changeOffset","orientation","canvasStageData","toDataURL","mimeType","saveAs","Boolean","hostname","match","cache","InMemoryCache","httpLink","HttpLink","uri","process","middlewareLink","setContext","headers","client","ApolloClient","link","concat","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d439f40.chunk.js","sourcesContent":["import React from 'react';\nimport useImage from 'use-image';\nimport { Stage, Layer, Transformer, Image as KonvaImage } from 'react-konva';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport * as loadImage from 'blueimp-load-image';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { saveAs } from 'file-saver';\n\nconst useStyles = makeStyles({\n  outerContainer: {\n    height: '100vh',\n    display: 'flex',\n  },\n  stageContainerAfterUpload: {\n    width: '100%',\n    alignContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainerAfterUpload: {\n    width: '100%',\n    position: 'absolute',\n    bottom: 0,\n    display: 'flex',\n    justifyContent: 'space-evenly',\n  },\n  buttonContainerBeforeUpload: {\n    width: '100%',\n  },\n  singleButtonContainerBeforeUpload: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  singleButtonContainerAfterUpload: {\n    width: '48%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  button: {\n    background: '#252a2b',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    textAlign: 'center',\n    width: '100%',\n    alignSelf: 'stretch',\n  },\n  buttonBeforeUpload: {\n    background: '#252a2b',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    color: 'white',\n    border: '2px solid transparent',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    borderRadius: 0,\n    padding: '15px 30px',\n    width: '50%',\n    display: 'flex',\n    alignSelf: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst Lamp = ({\n  backgroundImage,\n  data,\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n}) => {\n  const [lampUrl, setLampUrl] = React.useState(null);\n  let lampHeight;\n  let lampWidth;\n  if (\n    data &&\n    data.node &&\n    data.node.images &&\n    data.node.images.edges.length !== 0 &&\n    lampUrl === null\n  ) {\n    data.node.images.edges.forEach((product) => {\n      if (product.node.altText === 'collage') {\n        setLampUrl(product.node.originalSrc);\n      }\n    });\n  }\n  const [image] = useImage(lampUrl, 'Anonymous');\n  if (\n    image &&\n    shapeProps &&\n    shapeProps.height === null &&\n    shapeProps.width === null\n  ) {\n    const aspectRatio = image.width / image.height;\n    if (backgroundImage) {\n      if (\n        backgroundImage.height > backgroundImage.width &&\n        window.innerHeight > window.innerWidth\n      ) {\n        lampHeight = window.innerHeight / 4;\n      } else if (\n        backgroundImage.height > backgroundImage.width &&\n        window.innerHeight < window.innerWidth\n      ) {\n        lampHeight = window.innerHeight / 3;\n      } else if (\n        backgroundImage.height < backgroundImage.width &&\n        window.innerHeight > window.innerWidth\n      ) {\n        lampHeight = window.innerHeight / 6;\n      } else {\n        lampHeight = window.innerHeight / 3;\n      }\n      lampWidth = lampHeight * aspectRatio;\n      shapeProps.width = lampWidth;\n      shapeProps.height = lampHeight;\n    }\n  }\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <KonvaImage\n        crossOrigin=\"anonymous\"\n        fill=\"\"\n        image={image}\n        onTap={onSelect}\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nconst PictureCollage = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  let productId = urlParams.get('product_id');\n  let query;\n  if (productId) {\n    productId = btoa('gid://shopify/Product/' + productId);\n    query = gql`\n      query query {\n        node(id: \"${productId}\") {\n          ... on Product {\n            images(first: 100) {\n              edges {\n                node {\n                  originalSrc\n                  altText\n                }\n              }\n            }\n          }\n        }\n      }\n    `;\n  } else {\n    query = gql`\n      query query {\n        shop {\n          name\n        }\n      }\n    `;\n  }\n\n  const classes = useStyles();\n  const { data } = useQuery(query);\n  const canvasStage = React.createRef();\n\n  let newImage = new Image();\n\n  const [backgroundImage, setBackgroundImage] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n  const [selected, setSelected] = React.useState(true);\n  const [innerWidth, setInnerWidth] = React.useState(window.innerWidth);\n  const [innerHeight, setInnerHeight] = React.useState(window.innerHeight);\n  const [shape, setShape] = React.useState(null);\n  const [currentOrientation, setCurrentOrientation] = React.useState(null);\n  const [offset, setOffset] = React.useState(null);\n  const [backgroundCanvasWidth, setBackgroundCanvasWidth] = React.useState(\n    null\n  );\n  const [backgroundCanvasHeight, setBackgroundCanvasHeight] = React.useState(\n    null\n  );\n\n  function changeOffset(scaledImage) {\n    //The picture gets put in the center of the screen with offset\n    //orientationInnerHeight (width) - scaledImage.height (width) gets the full blank space\n    //and  \"/2\" makes the space even on either side\n    let offsetX;\n    let offsetY;\n    if (scaledImage.width / window.devicePixelRatio < window.innerWidth) {\n      offsetX =\n        (window.innerWidth - scaledImage.width / window.devicePixelRatio) / 2;\n    }\n    if (scaledImage.height / window.devicePixelRatio < window.innerHeight) {\n      offsetY =\n        (window.innerHeight - scaledImage.height / window.devicePixelRatio) / 2;\n    }\n    setOffset({ x: offsetX, y: offsetY });\n    setShape({\n      x: offsetX,\n      y: offsetY,\n      width: null,\n      height: null,\n    });\n  }\n\n  function changeOrientation() {\n    //Gets the current orientation before the phone rotates, so true means that the phone will be in landscape afterwards\n    const orientation = window.matchMedia('(orientation: portrait)');\n    if (orientation.matches === true) {\n      setCurrentOrientation('landscape');\n    } else {\n      setCurrentOrientation('portrait');\n    }\n    //The innerWidth is from before the rotation, so the width of the image has to be set to the innerHeight\n    const orientationInnerWidth = window.innerWidth;\n    const orientationInnerHeight = window.innerHeight;\n    if (backgroundImage) {\n      const scaledImage = loadImage.scale(backgroundImage, {\n        maxWidth: orientationInnerWidth,\n        maxHeight: orientationInnerHeight,\n        downsamplingRatio: 0.2,\n        pixelRatio: window.devicePixelRatio,\n        imageSmoothingEnabled: true,\n        imageSmoothingQuality: 'high',\n        canvas: true,\n      });\n      setImage(scaledImage);\n      setBackgroundCanvasWidth(parseInt(scaledImage.style.width, 10));\n      setBackgroundCanvasHeight(parseInt(scaledImage.style.height, 10));\n      let offsetX;\n      let offsetY;\n      if (scaledImage.width / window.devicePixelRatio < orientationInnerWidth) {\n        offsetX =\n          (orientationInnerWidth -\n            scaledImage.width / window.devicePixelRatio) /\n          2;\n      }\n      if (\n        scaledImage.height / window.devicePixelRatio <\n        orientationInnerHeight\n      ) {\n        offsetY =\n          (orientationInnerHeight -\n            scaledImage.height / window.devicePixelRatio) /\n          2;\n      }\n      setOffset({ x: offsetX, y: offsetY });\n      setShape({\n        x: offsetX,\n        y: offsetY,\n        width: null,\n        height: null,\n      });\n    }\n    //Sets the innerHeight for after the rotation\n    setInnerHeight(orientationInnerHeight);\n    setInnerWidth(orientationInnerWidth);\n  }\n\n  React.useEffect(() => {\n    window.onorientationchange = function () {\n      //Checks if the screen was rotated\n      //timeout implemented to check if the phone was rotated 180° which is sometimes not noticed by\n      //window.onorientationChange\n      this.setTimeout(() => {\n        if (window.innerHeight !== innerHeight) {\n          changeOrientation();\n        }\n      }, 400);\n    };\n  }, [backgroundImage, newImage]);\n\n  let backgroundImageUpload = false;\n  if (backgroundImage !== null) {\n    backgroundImageUpload = true;\n  }\n\n  const handleImageUpload = (e) => {\n    const [file] = e.target.files;\n    if (file) {\n      loadImage(\n        file,\n        (img) => {\n          const scaledImage = loadImage.scale(img, {\n            maxWidth: innerWidth,\n            maxHeight: innerHeight,\n            downsamplingRatio: 0.2,\n            pixelRatio: window.devicePixelRatio,\n            imageSmoothingEnabled: true,\n            imageSmoothingQuality: 'high',\n            canvas: true,\n          });\n          setImage(scaledImage);\n          setBackgroundImage(img);\n          changeOffset(scaledImage);\n          setBackgroundCanvasWidth(parseInt(scaledImage.style.width, 10));\n          setBackgroundCanvasHeight(parseInt(scaledImage.style.height, 10));\n        },\n        {\n          orientation: true,\n        }\n      );\n    }\n  };\n\n  const saveImage = () => {\n    setSelected(false);\n    setTimeout(() => {\n      let canvasStageSave = canvasStage.current;\n      const canvasStageData = canvasStageSave.toDataURL({\n        pixelRatio: window.devicePixelRatio,\n        mimeType: 'image/png',\n      });\n      saveAs(canvasStageData, 'collage.png');\n    }, 150);\n  };\n\n  if (window.matchMedia(`(orientation: ${currentOrientation} )`) === false) {\n    changeOrientation();\n  }\n\n  return (\n    <div className={classes.outerContainer}>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.stageContainerAfterUpload\n            : classes.stageContainerBeforeUpload\n        }\n      >\n        <Stage\n          visible={backgroundImageUpload}\n          ref={canvasStage}\n          width={innerWidth}\n          height={innerHeight}\n        >\n          <Layer\n            onClick={() => {\n              setSelected(false);\n            }}\n            onTap={() => {\n              setSelected(false);\n            }}\n          >\n            <KonvaImage\n              width={backgroundCanvasWidth}\n              height={backgroundCanvasHeight}\n              x={shape ? offset.x : 0}\n              y={shape ? offset.y : 0}\n              image={image}\n            />\n          </Layer>\n          <Layer visible={backgroundImageUpload}>\n            <Lamp\n              backgroundImage={image}\n              data={data}\n              shapeProps={shape}\n              isSelected={selected}\n              onSelect={() => {\n                setSelected(true);\n              }}\n              onChange={setShape}\n            />\n          </Layer>\n        </Stage>\n      </div>\n      <div\n        className={\n          backgroundImageUpload\n            ? classes.buttonContainerAfterUpload\n            : classes.buttonContainerBeforeUpload\n        }\n      >\n        <div\n          className={\n            backgroundImageUpload\n              ? classes.singleButtonContainerAfterUpload\n              : classes.singleButtonContainerBeforeUpload\n          }\n        >\n          <label\n            className={\n              backgroundImageUpload\n                ? classes.button\n                : classes.buttonBeforeUpload\n            }\n            htmlFor=\"files\"\n          >\n            Bild hochladen\n            <input\n              id=\"files\"\n              visibility=\"hidden\"\n              type=\"file\"\n              accept=\"image/*\"\n              style={{ display: 'none' }}\n              onChange={handleImageUpload}\n            />\n          </label>\n        </div>\n        <div\n          style={\n            backgroundImageUpload\n              ? { visibility: 'visible' }\n              : { visibility: 'hidden' }\n          }\n          className={classes.singleButtonContainerAfterUpload}\n        >\n          <label className={classes.button} onClick={saveImage}>\n            Bild Speichern\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PictureCollage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PictureCollage from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_SHOPIFY_URI,\n});\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token':\n      process.env.REACT_APP_SHOPIFY_STOREFRONT_ACCESS_TOKEN,\n  },\n}));\n\nconst client = new ApolloClient({\n  link: middlewareLink.concat(httpLink),\n  cache,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <PictureCollage />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}